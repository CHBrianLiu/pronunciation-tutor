// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	linebot "github.com/line/line-bot-sdk-go/v7/linebot"
	mock "github.com/stretchr/testify/mock"
)

// HandlerManager is an autogenerated mock type for the HandlerManager type
type HandlerManager struct {
	mock.Mock
}

// GetHandler provides a mock function with given fields: _a0
func (_m *HandlerManager) GetHandler(_a0 *linebot.Event) (func(*linebot.Event), bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetHandler")
	}

	var r0 func(*linebot.Event)
	var r1 bool
	if rf, ok := ret.Get(0).(func(*linebot.Event) (func(*linebot.Event), bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*linebot.Event) func(*linebot.Event)); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*linebot.Event))
		}
	}

	if rf, ok := ret.Get(1).(func(*linebot.Event) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewHandlerManager creates a new instance of HandlerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerManager {
	mock := &HandlerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

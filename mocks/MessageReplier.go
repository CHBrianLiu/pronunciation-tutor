// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	handlers "github.com/CHBrianLiu/pronunciation-tutor/internal/webhook/handlers"
	linebot "github.com/line/line-bot-sdk-go/v7/linebot"

	mock "github.com/stretchr/testify/mock"
)

// MessageReplier is an autogenerated mock type for the MessageReplier type
type MessageReplier struct {
	mock.Mock
}

// ReplyMessage provides a mock function with given fields: replyToken, messages
func (_m *MessageReplier) ReplyMessage(replyToken string, messages ...linebot.SendingMessage) handlers.ReplyDoer {
	_va := make([]interface{}, len(messages))
	for _i := range messages {
		_va[_i] = messages[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, replyToken)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplyMessage")
	}

	var r0 handlers.ReplyDoer
	if rf, ok := ret.Get(0).(func(string, ...linebot.SendingMessage) handlers.ReplyDoer); ok {
		r0 = rf(replyToken, messages...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handlers.ReplyDoer)
		}
	}

	return r0
}

// NewMessageReplier creates a new instance of MessageReplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageReplier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageReplier {
	mock := &MessageReplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
